import { Router } from 'express';
import { realtimeVulnerabilityService } from '../services/realtimeVulnerabilityService';

const router = Router();

// Get vulnerabilities for a specific package
router.get('/package/:packageName', async (req, res) => {
  try {
    const { packageName } = req.params;
    const { version } = req.query;
    
    const vulnerabilities = await realtimeVulnerabilityService.fetchVulnerabilitiesForSinglePackage(
      packageName, 
      version as string
    );
    
    res.json({
      package: packageName,
      version: version || 'latest',
      vulnerabilities,
      count: vulnerabilities.length,
      lastChecked: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error fetching package vulnerabilities:', error);
    res.status(500).json({
      error: 'Failed to fetch vulnerability data',
      details: error.message
    });
  }
});

// Check package health
router.get('/health/:packageName', async (req, res) => {
  try {
    const { packageName } = req.params;
    
    const health = await realtimeVulnerabilityService.checkPackageHealth(packageName);
    
    res.json(health);
  } catch (error) {
    console.error('Error checking package health:', error);
    res.status(500).json({
      error: 'Failed to check package health',
      details: error.message
    });
  }
});

// Bulk vulnerability check
router.post('/bulk-check', async (req, res) => {
  try {
    const { packages } = req.body;
    
    if (!packages || typeof packages !== 'object') {
      return res.status(400).json({
        error: 'Invalid request body. Expected packages object with package-name: version pairs.'
      });
    }
    
    const vulnerabilities = await realtimeVulnerabilityService.fetchVulnerabilitiesForPackages(packages);
    
    // Group vulnerabilities by package
    const grouped = vulnerabilities.reduce((acc, vuln) => {
      if (!acc[vuln.package]) {
        acc[vuln.package] = [];
      }
      acc[vuln.package].push(vuln);
      return acc;
    }, {} as Record<string, any[]>);
    
    res.json({
      packages: Object.keys(packages),
      vulnerabilities: grouped,
      totalVulnerabilities: vulnerabilities.length,
      lastChecked: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in bulk vulnerability check:', error);
    res.status(500).json({
      error: 'Failed to perform bulk vulnerability check',
      details: error.message
    });
  }
});

export default router;
import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Progress } from "@/components/ui/progress";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { 
  Shield, 
  AlertTriangle, 
  CheckCircle, 
  Clock, 
  TrendingUp, 
  GitBranch, 
  Code, 
  ExternalLink,
  Calendar,
  Download,
  Activity,
  Zap
} from "lucide-react";
import { Vulnerability } from "@shared/schema";

interface VulnerabilityDetailsModalProps {
  vulnerability: Vulnerability | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

interface PackageDetails {
  name: string;
  currentVersion: string;
  latestVersion: string;
  recommendedVersion: string;
  weeklyDownloads: number;
  lastPublished: string;
  maintainerStatus: 'active' | 'inactive' | 'deprecated';
  hasBreakingChanges: boolean;
  usageInProject: {
    filesAffected: number;
    methodsUsed: string[];
    importPatterns: string[];
  };
  upgradeComplexity: 'low' | 'medium' | 'high';
  estimatedWork: string;
}

export function VulnerabilityDetailsModal({ vulnerability, open, onOpenChange }: VulnerabilityDetailsModalProps) {
  const [packageDetails, setPackageDetails] = useState<PackageDetails | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (vulnerability && open) {
      fetchPackageDetails(vulnerability.package);
    }
  }, [vulnerability, open]);

  const fetchPackageDetails = async (packageName: string) => {
    setLoading(true);
    try {
      const response = await fetch(`/api/package-details/${packageName}`);
      if (response.ok) {
        const data = await response.json();
        setPackageDetails(data);
      }
    } catch (error) {
      console.error('Failed to fetch package details:', error);
      // Mock data for demonstration
      setPackageDetails({
        name: packageName,
        currentVersion: vulnerability?.version || "unknown",
        latestVersion: "4.17.21",
        recommendedVersion: vulnerability?.fixedIn || "latest",
        weeklyDownloads: 28500000,
        lastPublished: "2023-08-15",
        maintainerStatus: 'active',
        hasBreakingChanges: false,
        usageInProject: {
          filesAffected: vulnerability?.usageAnalysis?.filesAffected || 3,
          methodsUsed: vulnerability?.usageAnalysis?.methodsUsed || ['get', 'pick', 'merge'],
          importPatterns: ['require("lodash")', 'import _ from "lodash"']
        },
        upgradeComplexity: vulnerability?.usageAnalysis?.migrationRisk || 'low',
        estimatedWork: '2-4 hours'
      });
    } finally {
      setLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getComplexityColor = (complexity: string) => {
    switch (complexity) {
      case 'high': return 'text-red-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-green-600';
      default: return 'text-gray-600';
    }
  };

  const getComplexityProgress = (complexity: string) => {
    switch (complexity) {
      case 'high': return 85;
      case 'medium': return 50;
      case 'low': return 20;
      default: return 0;
    }
  };

  if (!vulnerability) return null;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-3">
            <Shield className="w-5 h-5" />
            {vulnerability.id}
            <Badge className={getSeverityColor(vulnerability.severity)}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
          </DialogTitle>
        </DialogHeader>

        <ScrollArea className="max-h-[80vh]">
          <div className="space-y-6">
            {/* Vulnerability Overview */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <AlertTriangle className="w-4 h-4" />
                  Vulnerability Overview
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">Description</h4>
                  <p className="text-gray-700 leading-relaxed">{vulnerability.description}</p>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-1">Package</h4>
                    <p className="text-gray-700">{vulnerability.package}</p>
                  </div>
                  <div>
                    <h4 className="font-medium text-gray-900 mb-1">Current Version</h4>
                    <p className="text-gray-700">{vulnerability.version}</p>
                  </div>
                </div>

                {vulnerability.cvss && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-1">CVSS Score</h4>
                    <div className="flex items-center gap-2">
                      <span className="text-lg font-bold text-red-600">{vulnerability.cvss}</span>
                      <span className="text-gray-500">/ 10.0</span>
                    </div>
                  </div>
                )}

                {vulnerability.cveDetails && (
                  <div className="flex flex-wrap gap-2">
                    {vulnerability.cveDetails.hasExploit && (
                      <Badge variant="destructive" className="flex items-center gap-1">
                        <Zap className="w-3 h-3" />
                        Exploit Available
                      </Badge>
                    )}
                    {vulnerability.cveDetails.patchAvailable && (
                      <Badge variant="secondary" className="flex items-center gap-1">
                        <CheckCircle className="w-3 h-3" />
                        Patch Available
                      </Badge>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>

            <Tabs defaultValue="fix" className="w-full">
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="fix">Fix Information</TabsTrigger>
                <TabsTrigger value="recommendation">Recommendation</TabsTrigger>
                <TabsTrigger value="impact">Impact Analysis</TabsTrigger>
                <TabsTrigger value="upgrade">Upgrade Guide</TabsTrigger>
              </TabsList>

              <TabsContent value="fix" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <CheckCircle className="w-4 h-4" />
                      Fix Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div>
                      <h4 className="font-medium text-gray-900 mb-2">Fixed In Version</h4>
                      <p className="text-lg font-semibold text-green-600">
                        {vulnerability.fixedIn || 'Not specified'}
                      </p>
                    </div>

                    {packageDetails && (
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="font-medium text-gray-900 mb-1">Latest Version</h4>
                          <p className="text-gray-700">{packageDetails.latestVersion}</p>
                        </div>
                        <div>
                          <h4 className="font-medium text-gray-900 mb-1">Last Published</h4>
                          <p className="text-gray-700 flex items-center gap-1">
                            <Calendar className="w-3 h-3" />
                            {packageDetails.lastPublished}
                          </p>
                        </div>
                      </div>
                    )}

                    {vulnerability.references && vulnerability.references.length > 0 && (
                      <div>
                        <h4 className="font-medium text-gray-900 mb-2">References</h4>
                        <div className="space-y-1">
                          {vulnerability.references.slice(0, 3).map((ref, index) => (
                            <a
                              key={index}
                              href={ref.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm"
                            >
                              <ExternalLink className="w-3 h-3" />
                              {ref.url}
                            </a>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="recommendation" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <TrendingUp className="w-4 h-4" />
                      Recommended Action
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {packageDetails && (
                      <>
                        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                          <h4 className="font-medium text-green-900 mb-2">Recommended Version</h4>
                          <p className="text-lg font-semibold text-green-700">
                            {packageDetails.recommendedVersion}
                          </p>
                          <p className="text-sm text-green-600 mt-1">
                            This version fixes the vulnerability and maintains compatibility
                          </p>
                        </div>

                        <div className="grid grid-cols-3 gap-4">
                          <div className="text-center">
                            <div className="flex items-center justify-center mb-2">
                              <Download className="w-5 h-5 text-blue-600" />
                            </div>
                            <p className="text-sm font-medium text-gray-900">Weekly Downloads</p>
                            <p className="text-lg font-bold text-blue-600">
                              {(packageDetails.weeklyDownloads / 1000000).toFixed(1)}M
                            </p>
                          </div>
                          <div className="text-center">
                            <div className="flex items-center justify-center mb-2">
                              <Activity className="w-5 h-5 text-green-600" />
                            </div>
                            <p className="text-sm font-medium text-gray-900">Maintenance</p>
                            <p className={`text-lg font-bold ${
                              packageDetails.maintainerStatus === 'active' ? 'text-green-600' : 'text-red-600'
                            }`}>
                              {packageDetails.maintainerStatus}
                            </p>
                          </div>
                          <div className="text-center">
                            <div className="flex items-center justify-center mb-2">
                              <GitBranch className="w-5 h-5 text-purple-600" />
                            </div>
                            <p className="text-sm font-medium text-gray-900">Breaking Changes</p>
                            <p className={`text-lg font-bold ${
                              packageDetails.hasBreakingChanges ? 'text-red-600' : 'text-green-600'
                            }`}>
                              {packageDetails.hasBreakingChanges ? 'Yes' : 'No'}
                            </p>
                          </div>
                        </div>
                      </>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="impact" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Code className="w-4 h-4" />
                      Project Impact Analysis
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {packageDetails && (
                      <>
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Usage in Project</h4>
                          <div className="grid grid-cols-2 gap-4">
                            <div>
                              <p className="text-sm text-gray-600">Files Affected</p>
                              <p className="text-lg font-semibold text-gray-900">
                                {packageDetails.usageInProject.filesAffected}
                              </p>
                            </div>
                            <div>
                              <p className="text-sm text-gray-600">Methods Used</p>
                              <p className="text-lg font-semibold text-gray-900">
                                {packageDetails.usageInProject.methodsUsed.length}
                              </p>
                            </div>
                          </div>
                        </div>

                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Methods Used</h4>
                          <div className="flex flex-wrap gap-2">
                            {packageDetails.usageInProject.methodsUsed.map((method, index) => (
                              <Badge key={index} variant="secondary">
                                {method}
                              </Badge>
                            ))}
                          </div>
                        </div>

                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Import Patterns</h4>
                          <div className="bg-gray-50 rounded-lg p-3 space-y-1">
                            {packageDetails.usageInProject.importPatterns.map((pattern, index) => (
                              <code key={index} className="block text-sm text-gray-700">
                                {pattern}
                              </code>
                            ))}
                          </div>
                        </div>
                      </>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="upgrade" className="space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Clock className="w-4 h-4" />
                      Upgrade Estimation
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    {packageDetails && (
                      <>
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Complexity Assessment</h4>
                          <div className="space-y-2">
                            <div className="flex items-center justify-between">
                              <span className="text-sm text-gray-600">Upgrade Complexity</span>
                              <span className={`font-medium ${getComplexityColor(packageDetails.upgradeComplexity)}`}>
                                {packageDetails.upgradeComplexity.toUpperCase()}
                              </span>
                            </div>
                            <Progress 
                              value={getComplexityProgress(packageDetails.upgradeComplexity)} 
                              className="w-full"
                            />
                          </div>
                        </div>

                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Estimated Work</h4>
                          <p className="text-lg font-semibold text-blue-600">
                            {packageDetails.estimatedWork}
                          </p>
                        </div>

                        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                          <h4 className="font-medium text-blue-900 mb-2">Upgrade Steps</h4>
                          <ol className="list-decimal list-inside space-y-1 text-sm text-blue-700">
                            <li>Update package.json with recommended version</li>
                            <li>Run npm install to update dependencies</li>
                            <li>Test affected functionality in {packageDetails.usageInProject.filesAffected} files</li>
                            <li>Update any deprecated method calls if needed</li>
                            <li>Run full test suite to ensure compatibility</li>
                          </ol>
                        </div>

                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                          <h4 className="font-medium text-yellow-900 mb-2">Migration Command</h4>
                          <code className="block bg-yellow-100 rounded px-3 py-2 text-sm text-yellow-800">
                            npm install {vulnerability.package}@{packageDetails.recommendedVersion}
                          </code>
                        </div>
                      </>
                    )}
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>

            <div className="flex justify-end gap-3 pt-4 border-t">
              <Button variant="outline" onClick={() => onOpenChange(false)}>
                Close
              </Button>
              <Button className="bg-blue-600 hover:bg-blue-700">
                Generate Migration Plan
              </Button>
            </div>
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}
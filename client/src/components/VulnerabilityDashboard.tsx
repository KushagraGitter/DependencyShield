import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { AlertTriangle, Download, Bot, Shield } from "lucide-react";
import { Vulnerability, SecurityMetrics, DependencyInfo } from "@shared/schema";

interface VulnerabilityDashboardProps {
  vulnerabilities: Vulnerability[];
  metrics: SecurityMetrics;
  securityScore: number;
  dependencyInfo?: DependencyInfo | null;
}

export function VulnerabilityDashboard({ 
  vulnerabilities, 
  metrics, 
  securityScore, 
  dependencyInfo 
}: VulnerabilityDashboardProps) {
  const getScoreColor = (score: number) => {
    if (score >= 80) return "text-green-600";
    if (score >= 60) return "text-yellow-600";
    if (score >= 40) return "text-orange-600";
    return "text-red-600";
  };

  const getScoreBarColor = (score: number) => {
    if (score >= 80) return "bg-green-500";
    if (score >= 60) return "bg-yellow-500";
    if (score >= 40) return "bg-orange-500";
    return "bg-red-500";
  };

  const getScoreMessage = (score: number) => {
    if (score >= 80) return "Good security posture - Keep monitoring for new vulnerabilities";
    if (score >= 60) return "Moderate security - Consider addressing high severity issues";
    if (score >= 40) return "Needs improvement - Focus on critical and high severity issues";
    return "Poor security - Immediate action required for critical vulnerabilities";
  };

  const recentActivity = [
    {
      type: "critical",
      message: `${metrics.critical} critical vulnerabilities detected`,
      time: "Just now",
      color: "bg-red-500"
    },
    {
      type: "suggestion",
      message: "AI migration suggestions available",
      time: "Just now",
      color: "bg-green-500"
    },
    {
      type: "analysis",
      message: "Code analysis completed",
      time: "Just now",
      color: "bg-blue-500"
    }
  ];

  return (
    <div className="grid lg:grid-cols-3 gap-6 mb-8">
      {/* Security Overview */}
      <div className="lg:col-span-2">
        <Card className="shadow-sm">
          <CardContent className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-bold text-slate-900">Security Overview</h3>
              <span className="text-sm text-slate-600">
                Last updated: {new Date().toLocaleTimeString()}
              </span>
            </div>
            
            {/* Severity Metrics */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
              <div className="text-center p-4 bg-red-50 rounded-lg border border-red-200">
                <div className="text-2xl font-bold text-red-900">{metrics.critical}</div>
                <div className="text-sm font-medium text-red-700">Critical</div>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg border border-orange-200">
                <div className="text-2xl font-bold text-orange-900">{metrics.high}</div>
                <div className="text-sm font-medium text-orange-700">High</div>
              </div>
              <div className="text-center p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                <div className="text-2xl font-bold text-yellow-900">{metrics.moderate}</div>
                <div className="text-sm font-medium text-yellow-700">Moderate</div>
              </div>
              <div className="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
                <div className="text-2xl font-bold text-blue-900">{metrics.low}</div>
                <div className="text-sm font-medium text-blue-700">Low</div>
              </div>
            </div>

            {/* Security Score */}
            <div className="bg-slate-50 rounded-lg p-4 mb-6">
              <div className="flex items-center justify-between mb-2">
                <span className="font-medium text-slate-900">Security Score</span>
                <span className={`text-2xl font-bold ${getScoreColor(securityScore)}`}>
                  {securityScore}/100
                </span>
              </div>
              <Progress 
                value={securityScore} 
                className="h-3 mb-2"
              />
              <p className="text-sm text-slate-600">
                {getScoreMessage(securityScore)}
              </p>
            </div>

            
          </CardContent>
        </Card>
      </div>

      {/* Package Health */}
      <div className="space-y-6">
        {/* Dependencies Summary */}
        {dependencyInfo && (
          <Card className="shadow-sm">
            <CardContent className="p-6">
              <h4 className="font-semibold text-slate-900 mb-4">Dependencies</h4>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="text-sm text-slate-600">Total packages</span>
                  <span className="font-medium">{dependencyInfo.total}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-slate-600">Vulnerable</span>
                  <span className="font-medium text-red-600">{dependencyInfo.vulnerable}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-slate-600">Outdated</span>
                  <span className="font-medium text-orange-600">{dependencyInfo.outdated}</span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="text-sm text-slate-600">Unused</span>
                  <span className="font-medium text-blue-600">{dependencyInfo.unused}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Recent Activity */}
        <Card className="shadow-sm">
          <CardContent className="p-6">
            <h4 className="font-semibold text-slate-900 mb-4">Recent Activity</h4>
            <div className="space-y-3 text-sm">
              {recentActivity.map((activity, index) => (
                <div key={index} className="flex items-start space-x-3">
                  <div className={`w-2 h-2 ${activity.color} rounded-full mt-2`}></div>
                  <div>
                    <p className="text-slate-900">{activity.message}</p>
                    <p className="text-slate-500">{activity.time}</p>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

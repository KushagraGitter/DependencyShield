import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Shield, Search, AlertTriangle, CheckCircle, Loader2, Package } from "lucide-react";
import { apiRequest } from "@/lib/queryClient";
import { VulnerabilityBadge } from "./VulnerabilityBadge";

export function RealTimeVulnerabilityChecker() {
  const [packageName, setPackageName] = useState("");
  const [packageVersion, setPackageVersion] = useState("");
  const [isChecking, setIsChecking] = useState(false);
  const [vulnerabilityData, setVulnerabilityData] = useState<any>(null);
  const [packageDetails, setPackageDetails] = useState<any>(null);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState("package");

  const checkVulnerabilities = async () => {
    if (!packageName.trim()) return;

    setIsChecking(true);
    setError(null);
    setVulnerabilityData(null);
    setPackageDetails(null);

    try {
      // Get package details first
      const packageResponse = await apiRequest("GET", `/api/package-details/${encodeURIComponent(packageName)}`);
      const packageData = await packageResponse.json();
      setPackageDetails(packageData);

      // Use specified version or latest
      const versionToCheck = packageVersion.trim() || packageData.latestVersion || "latest";

      // Create a test package.json with the package and version
      const testPackageJson = {
        name: "test-project",
        version: "1.0.0",
        dependencies: {
          [packageName]: versionToCheck
        }
      };

      const response = await apiRequest("POST", "/api/analyze-json", testPackageJson);
      const analysisData = await response.json();
      
      setVulnerabilityData(analysisData);
    } catch (err) {
      setError(err instanceof Error ? err.message : "Failed to check vulnerabilities");
    } finally {
      setIsChecking(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <Card className="w-full max-w-4xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="w-5 h-5" />
          Real-Time Vulnerability Checker
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Search Input */}
        <div className="space-y-4">
          <div className="flex gap-2">
            <Input
              placeholder="Enter package name (e.g., lodash, axios, react)"
              value={packageName}
              onChange={(e) => setPackageName(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && checkVulnerabilities()}
              className="flex-1"
            />
            <Input
              placeholder="Version (optional, e.g., 4.17.20)"
              value={packageVersion}
              onChange={(e) => setPackageVersion(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && checkVulnerabilities()}
              className="w-48"
            />
            <Button 
              onClick={checkVulnerabilities}
              disabled={!packageName.trim() || isChecking}
              className="px-6"
            >
              {isChecking ? (
                <Loader2 className="w-4 h-4 animate-spin" />
              ) : (
                <Search className="w-4 h-4" />
              )}
              {isChecking ? "Checking..." : "Check"}
            </Button>
          </div>
          
          {packageVersion && (
            <p className="text-sm text-gray-600">
              Checking version: <span className="font-medium">{packageVersion}</span>
            </p>
          )}
        </div>

        {/* Error Display */}
        {error && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-center gap-2">
              <AlertTriangle className="w-4 h-4 text-red-600" />
              <span className="font-medium text-red-900">Error</span>
            </div>
            <p className="text-sm text-red-800 mt-1">{error}</p>
          </div>
        )}

        {/* Results */}
        {(vulnerabilityData || packageDetails) && (
          <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="package">Package Details</TabsTrigger>
              <TabsTrigger value="vulnerabilities">Vulnerabilities</TabsTrigger>
            </TabsList>

            <TabsContent value="package" className="space-y-4">
              {packageDetails && (
                <div className="space-y-4">
                  {/* Package Information */}
                  <Card>
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Package className="w-4 h-4" />
                        Package Information
                      </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Basic Info</h4>
                          <div className="space-y-2 text-sm">
                            <div><span className="font-medium">Name:</span> {packageDetails.name}</div>
                            <div><span className="font-medium">Latest Version:</span> {packageDetails.latestVersion}</div>
                            <div><span className="font-medium">Checked Version:</span> {packageVersion || packageDetails.latestVersion}</div>
                            <div><span className="font-medium">Weekly Downloads:</span> {packageDetails.weeklyDownloads?.toLocaleString() || 'N/A'}</div>
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-medium text-gray-900 mb-2">Status</h4>
                          <div className="space-y-2 text-sm">
                            <div className="flex items-center gap-2">
                              <span className="font-medium">Maintenance:</span>
                              <Badge className={
                                packageDetails.maintainerStatus === 'active' ? 'bg-green-100 text-green-800' :
                                packageDetails.maintainerStatus === 'deprecated' ? 'bg-red-100 text-red-800' :
                                'bg-orange-100 text-orange-800'
                              }>
                                {packageDetails.maintainerStatus}
                              </Badge>
                            </div>
                            <div><span className="font-medium">Breaking Changes:</span> {packageDetails.hasBreakingChanges ? 'Yes' : 'No'}</div>
                            <div><span className="font-medium">Last Published:</span> {packageDetails.lastPublished}</div>
                          </div>
                        </div>
                      </div>

                      {/* Deprecation Warning */}
                      {packageDetails.deprecationInfo?.isDeprecated && (
                        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
                          <div className="flex items-center gap-2 mb-2">
                            <AlertTriangle className="w-4 h-4 text-red-600" />
                            <span className="font-medium text-red-900">Package Deprecated</span>
                          </div>
                          <p className="text-sm text-red-800 mb-2">{packageDetails.deprecationInfo.message}</p>
                          <p className="text-xs text-red-600">Deprecated on: {packageDetails.deprecationInfo.date}</p>
                          
                          {packageDetails.alternatives?.length > 0 && (
                            <div className="mt-3">
                              <p className="text-sm font-medium text-red-900 mb-2">Recommended Alternatives:</p>
                              <div className="flex flex-wrap gap-2">
                                {packageDetails.alternatives.map((alt: string, index: number) => (
                                  <Badge key={index} variant="outline" className="bg-white text-red-700 border-red-300">
                                    {alt}
                                  </Badge>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                </div>
              )}
            </TabsContent>

            <TabsContent value="vulnerabilities" className="space-y-4">
              {vulnerabilityData && (
                <div className="space-y-4">
                  {/* Summary */}
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <Card className="border-blue-200 bg-blue-50">
                      <CardContent className="p-4 text-center">
                        <div className="text-2xl font-bold text-blue-700">
                          {vulnerabilityData.vulnerabilities?.length || 0}
                        </div>
                        <div className="text-sm text-blue-600">Total Vulnerabilities</div>
                      </CardContent>
                    </Card>
                    
                    <Card className="border-green-200 bg-green-50">
                      <CardContent className="p-4 text-center">
                        <div className="text-2xl font-bold text-green-700">
                          {vulnerabilityData.securityScore || 0}/100
                        </div>
                        <div className="text-sm text-green-600">Security Score</div>
                      </CardContent>
                    </Card>
                    
                    <Card className="border-red-200 bg-red-50">
                      <CardContent className="p-4 text-center">
                        <div className="text-2xl font-bold text-red-700">
                          {vulnerabilityData.securityMetrics?.critical || 0}
                        </div>
                        <div className="text-sm text-red-600">Critical</div>
                      </CardContent>
                    </Card>
                    
                    <Card className="border-orange-200 bg-orange-50">
                      <CardContent className="p-4 text-center">
                        <div className="text-2xl font-bold text-orange-700">
                          {vulnerabilityData.securityMetrics?.high || 0}
                        </div>
                        <div className="text-sm text-orange-600">High</div>
                      </CardContent>
                    </Card>
                  </div>

                  {/* Vulnerability Details */}
                  {vulnerabilityData.vulnerabilities && vulnerabilityData.vulnerabilities.length > 0 && (
                    <div className="space-y-3">
                      <h4 className="font-semibold text-slate-900">Vulnerability Details</h4>
                      {vulnerabilityData.vulnerabilities.map((vuln: any, index: number) => (
                        <div key={vuln.id || index} className="border border-slate-200 rounded-lg p-4">
                          <div className="flex items-start justify-between mb-2">
                            <div className="flex items-center space-x-3">
                              <Badge className={getSeverityColor(vuln.severity)}>
                                {vuln.severity.toUpperCase()}
                              </Badge>
                              <VulnerabilityBadge isDirect={vuln.isDirect ?? true} className="text-xs" />
                              {vuln.cve && (
                                <Badge variant="outline" className="text-xs">
                                  {vuln.cve}
                                </Badge>
                              )}
                              {vuln.cvss && (
                                <Badge variant="outline" className="text-xs">
                                  CVSS: {vuln.cvss}
                                </Badge>
                              )}
                            </div>
                            {vuln.fixedIn && (
                              <Badge className="bg-green-100 text-green-800 text-xs">
                                Fixed in: {vuln.fixedIn}
                              </Badge>
                            )}
                          </div>
                          
                          <h5 className="font-medium text-slate-900 mb-2">
                            Vulnerability ID: {vuln.id}
                          </h5>
                          
                          <p className="text-sm text-slate-700 mb-2">
                            {vuln.description}
                          </p>
                          
                          <div className="text-xs text-slate-500 space-y-1">
                            <div>Affected version: {vuln.version}</div>
                            {vuln.dependencyPath && vuln.dependencyPath.length > 0 && (
                              <div>Dependency chain: {vuln.dependencyPath.join(' → ')}</div>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* No Vulnerabilities */}
                  {vulnerabilityData.vulnerabilities && vulnerabilityData.vulnerabilities.length === 0 && (
                    <div className="text-center py-8">
                      <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                      <h3 className="text-lg font-semibold text-green-700 mb-2">
                        No Vulnerabilities Found!
                      </h3>
                      <p className="text-green-600">
                        The package <strong>{packageName}</strong> 
                        {packageVersion && <span> version <strong>{packageVersion}</strong></span>} 
                        appears to be secure.
                      </p>
                    </div>
                  )}
                </div>
              )}
            </TabsContent>
          </Tabs>
        )}
      </CardContent>
    </Card>
  );
}
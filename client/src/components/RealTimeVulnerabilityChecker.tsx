import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Search, Shield, AlertTriangle, CheckCircle, RefreshCw } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";

interface PackageHealth {
  hasVulnerabilities: boolean;
  vulnerabilityCount: number;
  lastChecked: string;
  sources: string[];
}

interface PackageVulnerability {
  id: string;
  package: string;
  version: string;
  severity: 'critical' | 'high' | 'moderate' | 'low';
  description: string;
  cve?: string;
  cvss?: number;
  fixedIn?: string;
}

interface VulnerabilityCheckResponse {
  package: string;
  version: string;
  vulnerabilities: PackageVulnerability[];
  count: number;
  lastChecked: string;
}

export function RealTimeVulnerabilityChecker() {
  const [packageName, setPackageName] = useState("");
  const [checkedPackage, setCheckedPackage] = useState<string | null>(null);

  const { data: healthData, isLoading: healthLoading, refetch: refetchHealth } = useQuery({
    queryKey: ['/api/vulnerabilities/health', checkedPackage],
    queryFn: async () => {
      if (!checkedPackage) return null;
      return await apiRequest<PackageHealth>(`/api/vulnerabilities/health/${checkedPackage}`, {
        method: 'GET',
      });
    },
    enabled: !!checkedPackage,
  });

  const { data: vulnerabilityData, isLoading: vulnLoading, refetch: refetchVulns } = useQuery({
    queryKey: ['/api/vulnerabilities/package', checkedPackage],
    queryFn: async () => {
      if (!checkedPackage) return null;
      return await apiRequest<VulnerabilityCheckResponse>(`/api/vulnerabilities/package/${checkedPackage}`, {
        method: 'GET',
      });
    },
    enabled: !!checkedPackage,
  });

  const handleCheck = () => {
    if (packageName.trim()) {
      setCheckedPackage(packageName.trim());
    }
  };

  const handleRefresh = () => {
    refetchHealth();
    refetchVulns();
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200';
      default: return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <Card className="shadow-sm">
      <div className="px-6 py-4 border-b border-slate-200">
        <div className="flex items-center space-x-3">
          <div className="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
            <Shield className="text-green-600 w-4 h-4" />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-slate-900">Real-Time Vulnerability Checker</h3>
            <p className="text-sm text-slate-600">Check any NPM package for live vulnerability data</p>
          </div>
        </div>
      </div>

      <CardContent className="p-6 space-y-6">
        {/* Search Section */}
        <div className="flex space-x-3">
          <div className="flex-1">
            <Input
              placeholder="Enter package name (e.g., lodash, express, react)"
              value={packageName}
              onChange={(e) => setPackageName(e.target.value)}
              onKeyDown={(e) => e.key === 'Enter' && handleCheck()}
              className="w-full"
            />
          </div>
          <Button 
            onClick={handleCheck}
            disabled={!packageName.trim() || healthLoading || vulnLoading}
            className="bg-green-600 hover:bg-green-700"
          >
            <Search className="w-4 h-4 mr-2" />
            Check
          </Button>
          {checkedPackage && (
            <Button 
              variant="outline"
              onClick={handleRefresh}
              disabled={healthLoading || vulnLoading}
            >
              <RefreshCw className={`w-4 h-4 ${(healthLoading || vulnLoading) ? 'animate-spin' : ''}`} />
            </Button>
          )}
        </div>

        {/* Results Section */}
        {checkedPackage && (
          <div className="space-y-4">
            {/* Package Health Overview */}
            {healthData && (
              <Alert className={`border ${healthData.hasVulnerabilities ? 'border-red-200 bg-red-50' : 'border-green-200 bg-green-50'}`}>
                <div className="flex items-center space-x-2">
                  {healthData.hasVulnerabilities ? (
                    <AlertTriangle className="w-4 h-4 text-red-600" />
                  ) : (
                    <CheckCircle className="w-4 h-4 text-green-600" />
                  )}
                  <AlertDescription className={healthData.hasVulnerabilities ? 'text-red-800' : 'text-green-800'}>
                    <span className="font-semibold">{checkedPackage}</span>
                    {healthData.hasVulnerabilities ? (
                      <> has {healthData.vulnerabilityCount} known vulnerabilit{healthData.vulnerabilityCount === 1 ? 'y' : 'ies'}</>
                    ) : (
                      <> appears to be secure with no known vulnerabilities</>
                    )}
                  </AlertDescription>
                </div>
                <div className="mt-2 text-xs text-slate-600">
                  Last checked: {new Date(healthData.lastChecked).toLocaleString()}
                  <br />
                  Sources: {healthData.sources.join(', ')}
                </div>
              </Alert>
            )}

            {/* Vulnerability Details */}
            {vulnerabilityData && vulnerabilityData.vulnerabilities.length > 0 && (
              <div className="space-y-3">
                <h4 className="font-semibold text-slate-900">Vulnerability Details</h4>
                {vulnerabilityData.vulnerabilities.map((vuln, index) => (
                  <div key={vuln.id || index} className="border border-slate-200 rounded-lg p-4">
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex items-center space-x-3">
                        <Badge className={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        {vuln.cve && (
                          <Badge variant="outline" className="text-xs">
                            {vuln.cve}
                          </Badge>
                        )}
                        {vuln.cvss && (
                          <Badge variant="outline" className="text-xs">
                            CVSS: {vuln.cvss}
                          </Badge>
                        )}
                      </div>
                      {vuln.fixedIn && (
                        <Badge className="bg-green-100 text-green-800 text-xs">
                          Fixed in: {vuln.fixedIn}
                        </Badge>
                      )}
                    </div>
                    
                    <h5 className="font-medium text-slate-900 mb-2">
                      Vulnerability ID: {vuln.id}
                    </h5>
                    
                    <p className="text-sm text-slate-700 mb-2">
                      {vuln.description}
                    </p>
                    
                    <div className="text-xs text-slate-500">
                      Affected version: {vuln.version}
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* No Vulnerabilities Message */}
            {vulnerabilityData && vulnerabilityData.vulnerabilities.length === 0 && (
              <div className="text-center py-8">
                <CheckCircle className="w-12 h-12 text-green-600 mx-auto mb-3" />
                <h4 className="font-semibold text-slate-900 mb-2">No Vulnerabilities Found</h4>
                <p className="text-slate-600">
                  {checkedPackage} appears to be secure according to current vulnerability databases.
                </p>
              </div>
            )}

            {/* Loading State */}
            {(healthLoading || vulnLoading) && (
              <div className="text-center py-8">
                <RefreshCw className="w-8 h-8 text-blue-600 mx-auto mb-3 animate-spin" />
                <p className="text-slate-600">
                  Checking vulnerability databases...
                </p>
              </div>
            )}
          </div>
        )}

        {/* Data Sources Info */}
        <div className="text-xs text-slate-500 border-t border-slate-200 pt-4">
          <p><strong>Data Sources:</strong></p>
          <ul className="list-disc list-inside mt-1 space-y-1">
            <li>OSV (Open Source Vulnerabilities) - Real-time vulnerability database</li>
            <li>GitHub Security Advisory Database - Comprehensive security advisories</li>
            <li>CVE (Common Vulnerabilities and Exposures) - Industry standard vulnerability identifiers</li>
          </ul>
        </div>
      </CardContent>
    </Card>
  );
}
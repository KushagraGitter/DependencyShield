import { useState, useMemo } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Search, Filter, AlertCircle, Shield, ExternalLink, Eye } from "lucide-react";
import { Vulnerability } from "@shared/schema";
import { VulnerabilityDetailsModal } from "./VulnerabilityDetailsModal";

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
}

export function VulnerabilityListWithDetails({ vulnerabilities }: VulnerabilityListProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [severityFilter, setSeverityFilter] = useState("all");
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);
  const [modalOpen, setModalOpen] = useState(false);

  const filteredVulnerabilities = useMemo(() => {
    return vulnerabilities.filter(vuln => {
      const matchesSearch = searchTerm === "" || 
        vuln.package.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        vuln.id.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesSeverity = severityFilter === "all" || vuln.severity === severityFilter;
      
      return matchesSearch && matchesSeverity;
    });
  }, [vulnerabilities, searchTerm, severityFilter]);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200';
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case 'moderate':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getSeverityLabel = (severity: string) => {
    return severity.charAt(0).toUpperCase() + severity.slice(1);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Shield className="w-5 h-5" />
          Vulnerabilities Found ({filteredVulnerabilities.length})
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        {/* Filters */}
        <div className="flex flex-col sm:flex-row gap-4 mb-6">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search vulnerabilities..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <Select value={severityFilter} onValueChange={setSeverityFilter}>
            <SelectTrigger className="w-full sm:w-48">
              <Filter className="w-4 h-4 mr-2" />
              <SelectValue placeholder="Filter by severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severities</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="moderate">Moderate</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Vulnerability List */}
        {filteredVulnerabilities.length > 0 ? (
          <div className="space-y-4">
            {filteredVulnerabilities.map((vuln, index) => (
              <div key={`${vuln.package}-${vuln.id || `idx-${index}`}-${vuln.severity}`} className="p-6 border border-slate-200 rounded-lg hover:shadow-md transition-shadow">
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center space-x-3">
                    <Badge className={getSeverityColor(vuln.severity)}>
                      {getSeverityLabel(vuln.severity)}
                    </Badge>
                    <h3 className="font-semibold text-slate-900">{vuln.package}</h3>
                    <span className="text-sm text-slate-500">v{vuln.version}</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Button 
                      variant="outline" 
                      size="sm"
                      className="text-blue-600 hover:text-blue-700"
                      onClick={() => {
                        setSelectedVulnerability(vuln);
                        setModalOpen(true);
                      }}
                    >
                      <Eye className="w-3 h-3 mr-1" />
                      Details
                    </Button>
                    {vuln.cve && (
                      <Button 
                        variant="outline" 
                        size="sm"
                        asChild
                      >
                        <a 
                          href={`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.cve}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="text-slate-600 hover:text-slate-800"
                        >
                          <ExternalLink className="w-3 h-3 mr-1" />
                          {vuln.cve}
                        </a>
                      </Button>
                    )}
                  </div>
                </div>

                <p className="text-slate-700 mb-4 leading-relaxed">{vuln.description}</p>

                {/* Vulnerability Details */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span className="font-medium text-slate-900">ID:</span>
                    <span className="text-slate-600 ml-1">{vuln.id}</span>
                  </div>
                  {vuln.cvss && (
                    <div>
                      <span className="font-medium text-slate-900">CVSS Score:</span>
                      <span className={`ml-1 ${vuln.cvss >= 7 ? 'text-red-600' : vuln.cvss >= 4 ? 'text-yellow-600' : 'text-green-600'}`}>
                        {vuln.cvss}/10
                      </span>
                    </div>
                  )}
                  {vuln.fixedIn && (
                    <div>
                      <span className="font-medium text-slate-900">Fixed in:</span>
                      <span className="text-green-600 ml-1">{vuln.fixedIn}</span>
                    </div>
                  )}
                </div>

                {/* CVE Details */}
                {vuln.cveDetails && (
                  <div className="mt-4 pt-4 border-t border-slate-200">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      {vuln.cveDetails.hasExploit && (
                        <div>
                          <span className="font-medium text-red-900">Exploit Available:</span>
                          <span className="text-red-600 ml-1">Yes</span>
                        </div>
                      )}
                      {vuln.exploitabilityScore && (
                        <div>
                          <span className="font-medium text-slate-900">Exploitability:</span>
                          <span className="text-slate-600 ml-1">{vuln.exploitabilityScore}/10</span>
                        </div>
                      )}
                      {vuln.impactScore && (
                        <div>
                          <span className="font-medium text-slate-900">Impact Score:</span>
                          <span className="text-slate-600 ml-1">{vuln.impactScore}/10</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}

                {/* Usage Analysis */}
                {vuln.usageAnalysis && (
                  <div className="mt-4 pt-4 border-t border-slate-200">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                      <div>
                        <span className="font-medium text-slate-900">Files Affected:</span>
                        <span className="text-slate-600 ml-1">{vuln.usageAnalysis.filesAffected}</span>
                      </div>
                      <div>
                        <span className="font-medium text-slate-900">Migration Risk:</span>
                        <span className={`ml-1 ${
                          vuln.usageAnalysis.migrationRisk === 'high' ? 'text-red-600' :
                          vuln.usageAnalysis.migrationRisk === 'medium' ? 'text-yellow-600' : 'text-green-600'
                        }`}>
                          {vuln.usageAnalysis.migrationRisk}
                        </span>
                      </div>
                      {vuln.usageAnalysis.methodsUsed.length > 0 && (
                        <div>
                          <span className="font-medium text-slate-900">Methods Used:</span>
                          <span className="text-slate-600 ml-1">{vuln.usageAnalysis.methodsUsed.join(', ')}</span>
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        ) : (
          <div className="p-8 text-center">
            <AlertCircle className="w-12 h-12 text-slate-400 mx-auto mb-4" />
            <p className="text-slate-600">
              {searchTerm || severityFilter !== "all" 
                ? "No vulnerabilities found matching your filters." 
                : "No vulnerabilities detected in the analyzed packages."}
            </p>
          </div>
        )}

        <VulnerabilityDetailsModal
          vulnerability={selectedVulnerability}
          open={modalOpen}
          onOpenChange={setModalOpen}
        />
      </CardContent>
    </Card>
  );
}
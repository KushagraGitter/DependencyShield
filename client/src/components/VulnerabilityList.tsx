import { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ExternalLink, Bot, Filter } from "lucide-react";
import { Vulnerability } from "@shared/schema";

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
}

export function VulnerabilityList({ vulnerabilities }: VulnerabilityListProps) {
  const [severityFilter, setSeverityFilter] = useState<string>("all");

  const filteredVulnerabilities = severityFilter === "all" 
    ? vulnerabilities 
    : vulnerabilities.filter(vuln => vuln.severity === severityFilter);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800';
      case 'high':
        return 'bg-orange-100 text-orange-800';
      case 'moderate':
        return 'bg-yellow-100 text-yellow-800';
      case 'low':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getSeverityLabel = (severity: string) => {
    return severity.toUpperCase();
  };

  if (vulnerabilities.length === 0) {
    return (
      <Card className="shadow-sm mb-8">
        <CardContent className="p-8 text-center">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <span className="text-green-600 text-2xl">âœ“</span>
          </div>
          <h3 className="text-lg font-semibold text-slate-900 mb-2">No Vulnerabilities Found</h3>
          <p className="text-slate-600">Great! Your dependencies appear to be secure.</p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow-sm mb-8">
      <div className="px-6 py-4 border-b border-slate-200 flex items-center justify-between">
        <h3 className="text-lg font-semibold text-slate-900">Vulnerability Details</h3>
        <div className="flex items-center space-x-3">
          <Select value={severityFilter} onValueChange={setSeverityFilter}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Filter by severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severities</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="moderate">Moderate</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>
          <Button variant="ghost" size="sm">
            <Filter className="w-4 h-4" />
          </Button>
        </div>
      </div>
      
      <div className="overflow-x-auto">
        {filteredVulnerabilities.map((vuln, index) => (
          <div key={vuln.id || index} className="p-6 border-b border-slate-200 last:border-b-0">
            <div className="flex items-start justify-between mb-3">
              <div className="flex items-center space-x-3">
                <Badge className={getSeverityColor(vuln.severity)}>
                  {getSeverityLabel(vuln.severity)}
                </Badge>
                <h4 className="font-semibold text-slate-900">{vuln.package}</h4>
                <span className="text-sm text-slate-600">{vuln.version}</span>
              </div>
              <div className="flex items-center space-x-2">
                <Button variant="ghost" size="sm" className="text-blue-600 hover:text-blue-800">
                  <Bot className="w-4 h-4 mr-1" />
                  AI Fix
                </Button>
                <Button variant="ghost" size="sm" className="text-slate-600 hover:text-slate-800">
                  <ExternalLink className="w-4 h-4" />
                </Button>
              </div>
            </div>
            
            <p className="text-slate-700 mb-3">{vuln.description}</p>
            
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              {vuln.cve && (
                <div>
                  <span className="font-medium text-slate-900">CVE:</span>
                  <span className="text-slate-600 ml-1">{vuln.cve}</span>
                </div>
              )}
              {vuln.cvss && (
                <div>
                  <span className="font-medium text-slate-900">CVSS Score:</span>
                  <span className="text-slate-600 ml-1">{vuln.cvss}</span>
                </div>
              )}
              {vuln.fixedIn && (
                <div>
                  <span className="font-medium text-slate-900">Fixed in:</span>
                  <span className="text-green-600 ml-1">{vuln.fixedIn}</span>
                </div>
              )}
            </div>

            {/* Usage Analysis */}
            {vuln.usageAnalysis && (
              <div className="mt-4 p-3 bg-blue-50 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium text-blue-900">Code Usage Analysis</span>
                  <span className="text-xs text-blue-700">
                    Found in {vuln.usageAnalysis.filesAffected} files
                  </span>
                </div>
                {vuln.usageAnalysis.methodsUsed.length > 0 && (
                  <div className="flex flex-wrap gap-1">
                    {vuln.usageAnalysis.methodsUsed.slice(0, 5).map((method, methodIndex) => (
                      <Badge key={methodIndex} variant="secondary" className="bg-blue-200 text-blue-800 text-xs">
                        {method}
                      </Badge>
                    ))}
                    {vuln.usageAnalysis.methodsUsed.length > 5 && (
                      <span className="text-xs text-blue-600">
                        +{vuln.usageAnalysis.methodsUsed.length - 5} more
                      </span>
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>

      {filteredVulnerabilities.length === 0 && severityFilter !== "all" && (
        <div className="p-8 text-center">
          <p className="text-slate-600">No vulnerabilities found for the selected severity level.</p>
        </div>
      )}
    </Card>
  );
}
